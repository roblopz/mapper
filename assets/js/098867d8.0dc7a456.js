"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[3233],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),l=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(m.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,m=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=l(n),f=a,d=u["".concat(m,".").concat(f)]||u[f]||c[f]||o;return n?r.createElement(d,i(i({ref:t},s),{},{components:n})):r.createElement(d,i({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var p={};for(var m in t)hasOwnProperty.call(t,m)&&(p[m]=t[m]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9229:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return m},metadata:function(){return l},toc:function(){return s},default:function(){return u}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),i=["components"],p={id:"for-self",title:"For Self",sidebar_label:"For Self (Flattening)"},m=void 0,l={unversionedId:"mapping-configuration/for-self",id:"mapping-configuration/for-self",title:"For Self",description:"We know that we can have Flattening with NamingConvention. Let's remind ourselves how that works",source:"@site/docs/mapping-configuration/for-self.md",sourceDirName:"mapping-configuration",slug:"/mapping-configuration/for-self",permalink:"/docs/mapping-configuration/for-self",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/mapping-configuration/for-self.md",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1636557317,formattedLastUpdatedAt:"11/10/2021",frontMatter:{id:"for-self",title:"For Self",sidebar_label:"For Self (Flattening)"},sidebar:"docs",previous:{title:"MapDefer",permalink:"/docs/mapping-configuration/map-defer"},next:{title:"PreCondition",permalink:"/docs/mapping-configuration/pre-condition"}},s=[],c={toc:s};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"We know that we can have ",(0,o.kt)("a",{parentName:"p",href:"/docs/mapping-configuration/auto#flattening"},"Flattening")," with ",(0,o.kt)("a",{parentName:"p",href:"/docs/fundamentals#namingconvention"},"NamingConvention"),". Let's remind ourselves how that works"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Item {\n  @AutoMap()\n  name: string;\n  @AutoMap()\n  price: number;\n  @AutoMap()\n  stock: number;\n}\n\nclass CartItem {\n  @AutoMap({ typeFn: () => Item })\n  item: Item;\n  @AutoMap()\n  quantity: number;\n}\n\nclass CartItemDto {\n  @AutoMap()\n  itemName: string;\n  @AutoMap()\n  itemPrice: number;\n  @AutoMap()\n  quantity: number;\n\n  get total() {\n    return this.price * this.quantity;\n  }\n}\n")),(0,o.kt)("p",null,"When we ",(0,o.kt)("inlineCode",{parentName:"p"},"createMap(CartItem, CartItemDto)")," with a ",(0,o.kt)("inlineCode",{parentName:"p"},"CamelCaseNamingConvention"),", we get the following result when map from ",(0,o.kt)("inlineCode",{parentName:"p"},"CartItem")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"CartItemDto"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"mapper.createMap(CartItem, CartItemDto, {\n  namingConventions: new CamelCaseNamingConvention(),\n});\n\nconst dto = mapper.map(cartItem, CartItemDto, CartItem);\n\n// dto.itemName will be mapped from cartItem.item.name automatically\n// dto.itemPrice will be mapped from cartItem.item.price automatically\n")),(0,o.kt)("p",null,"However, sometimes we want to keep our DTOs cleaner with ",(0,o.kt)("strong",{parentName:"p"},"NOT")," having to prefix some fields just to achieve automatic Flattening, let's adjust our models a little:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Item {\n  @AutoMap()\n  name: string;\n  @AutoMap()\n  price: number;\n  @AutoMap()\n  stock: number;\n}\n\nclass CartItem {\n  @AutoMap({ typeFn: () => Item })\n  item: Item;\n  @AutoMap()\n  quantity: number;\n}\n\nclass CartItemDto {\n  @AutoMap()\n  name: string;\n  @AutoMap()\n  price: number;\n  @AutoMap()\n  quantity: number;\n\n  get total() {\n    return this.price * this.quantity;\n  }\n}\n")),(0,o.kt)("p",null,"There are two approaches to go about this:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"forMember()")," explicitly")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"mapper\n  .createMap(CartItem, CartItemDto, {\n    namingConventions: new CamelCaseNamingConvention(),\n  })\n  .forMember(\n    (d) => d.name,\n    mapFrom((s) => s.item.name)\n  )\n  .forMember(\n    (d) => d.price,\n    mapFrom((s) => s.item.price)\n  );\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"forSelf()"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"mapper.createMap(Item, CartItemDto);\nmapper\n  .createMap(CartItem, CartItemDto, {\n    namingConventions: new CamelCaseNamingConvention(),\n  })\n  .forSelf(Item, (s) => s.item);\n")),(0,o.kt)("p",null,"With ",(0,o.kt)("inlineCode",{parentName:"p"},"forSelf(Item, (s) => s.item)"),", we're saying: ","_",'"For everything that is matching between ',(0,o.kt)("inlineCode",{parentName:"p"},"CartItemDto")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Item"),", please flatten those using ",(0,o.kt)("inlineCode",{parentName:"p"},"s.item")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"CartItem"),'".'))}u.isMDXComponent=!0}}]);