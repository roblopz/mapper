"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[1251],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||a;return n?i.createElement(f,o(o({ref:t},p),{},{components:n})):i.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4917:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return p},default:function(){return c}});var i=n(3117),r=n(102),a=(n(7294),n(3905)),o=["components"],l={id:"introduce-to-sequelize",title:"Introduction",sidebar_label:"Introduction"},s=void 0,u={unversionedId:"plugins-system/introduce-to-sequelize",id:"plugins-system/introduce-to-sequelize",title:"Introduction",description:"@automapper/sequelize is one of the official plugins of @automapper/* monorepo. This plugin works with Sequelize by extending @automapper/classes and modifying instantiation process to accommodate Sequelize#Model type.",source:"@site/docs/plugins-system/introduce-to-sequelize.md",sourceDirName:"plugins-system",slug:"/plugins-system/introduce-to-sequelize",permalink:"/docs/plugins-system/introduce-to-sequelize",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/plugins-system/introduce-to-sequelize.md",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1615005720,formattedLastUpdatedAt:"3/6/2021",frontMatter:{id:"introduce-to-sequelize",title:"Introduction",sidebar_label:"Introduction"},sidebar:"docs",previous:{title:"Metadata",permalink:"/docs/plugins-system/pojos-metadata"},next:{title:"Create plugin",permalink:"/docs/plugins-system/create-plugin"}},p=[{value:"Installation",id:"installation",children:[],level:2},{value:"Usage",id:"usage",children:[],level:2}],d={toc:p};function c(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"@automapper/sequelize")," is one of the official plugins of ",(0,a.kt)("inlineCode",{parentName:"p"},"@automapper/*")," monorepo. This plugin works with ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/sequelize/sequelize"},(0,a.kt)("inlineCode",{parentName:"a"},"Sequelize"))," by extending ",(0,a.kt)("inlineCode",{parentName:"p"},"@automapper/classes")," and modifying instantiation process to accommodate ",(0,a.kt)("inlineCode",{parentName:"p"},"Sequelize#Model")," type."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @automapper/sequelize\n# or with yarn\nyarn add @automapper/sequelize\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"@automapper/sequelize")," provides ",(0,a.kt)("inlineCode",{parentName:"li"},"sequelize")," as a ",(0,a.kt)("inlineCode",{parentName:"li"},"(options: SequelizeInitializerOptions) => MapPluginInitializer"),". Pass ",(0,a.kt)("inlineCode",{parentName:"li"},"sequelize()")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"createMapper")," to create\na ",(0,a.kt)("inlineCode",{parentName:"li"},"Mapper")," that uses ",(0,a.kt)("inlineCode",{parentName:"li"},"sequelize")," plugin.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export interface SequelizeInitializerOptions {\n  valueGetter?: <\n    TGetterResult extends Record<string, unknown> = any,\n    TModel extends Model<TGetterResult> = Model<TGetterResult>\n  >(\n    model: TModel\n  ) => TGetterResult;\n  init?: <\n    TDestination extends Dictionary<TDestination> = any,\n    TModel extends Model<TDestination> = Model<TDestination>\n  >(\n    destination: TModel,\n    destinationObj: TDestination\n  ) => TDestination;\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"valueGetter")," is an optional getter that, if passed in, will be used to extract the value of the model after instantiation. By default, it will use ",(0,a.kt)("inlineCode",{parentName:"li"},"sequelize#Model.get()")," if it's available."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"init")," is an optional init function that, if passed in, will be used to instantiate a ",(0,a.kt)("inlineCode",{parentName:"li"},"Sequelize#Model")," after map. By default, it will use ",(0,a.kt)("inlineCode",{parentName:"li"},"new Model(mapResult)"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { sequelize } from '@automapper/sequelize';\nimport { Model } from 'sequelize-typescript';\n\nconst mapper = createMapper({\n  ...,\n  pluginInitializer: sequelize()\n  /**\n   * or\n   * sequelize({\n   *   valueGetter: model => model.get(getterOptions),\n   *   init: (model, mapResult) => model.init(mapResult, initOptions)\n   * })\n   */\n})\n\nclass User extends Model {}\n\nmapper.createMap(UserVm, User);\nmapper.map(userVm, User, UserVm);\n")))}c.isMDXComponent=!0}}]);