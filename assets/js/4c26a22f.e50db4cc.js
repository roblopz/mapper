"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[7003],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=o.createContext({}),c=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},l=function(e){var t=c(e.components);return o.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,f=u["".concat(i,".").concat(d)]||u[d]||m[d]||r;return n?o.createElement(f,p(p({ref:t},l),{},{components:n})):o.createElement(f,p({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,p=new Array(r);p[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,p[1]=s;for(var c=2;c<r;c++)p[c]=n[c];return o.createElement.apply(null,p)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2334:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return l},default:function(){return u}});var o=n(3117),a=n(102),r=(n(7294),n(3905)),p=["components"],s={id:"classes-mapped-types",title:"Mapped Types",sidebar_label:"Mapped Types"},i="@automapper/classes/mapped-types",c={unversionedId:"plugins-system/classes-mapped-types",id:"plugins-system/classes-mapped-types",title:"Mapped Types",description:"@automapper/classes/mapped-types is part of the public API of @automapper/classes.",source:"@site/docs/plugins-system/classes-mapped-types.md",sourceDirName:"plugins-system",slug:"/plugins-system/classes-mapped-types",permalink:"/docs/plugins-system/classes-mapped-types",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/plugins-system/classes-mapped-types.md",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1615518584,formattedLastUpdatedAt:"3/12/2021",frontMatter:{id:"classes-mapped-types",title:"Mapped Types",sidebar_label:"Mapped Types"},sidebar:"docs",previous:{title:"Transformer Plugin",permalink:"/docs/plugins-system/classes-transformer-plugin"},next:{title:"Introduction",permalink:"/docs/plugins-system/introduce-to-pojos"}},l=[{value:"Usage",id:"usage",children:[{value:"<code>MapperPickType</code>",id:"mapperpicktype",children:[],level:3},{value:"<code>MapperOmitType</code>",id:"mapperomittype",children:[],level:3},{value:"<code>MapperIntersectionType</code>",id:"mapperintersectiontype",children:[],level:3}],level:2}],m={toc:l};function u(e){var t=e.components,n=(0,a.Z)(e,p);return(0,r.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"automapperclassesmapped-types"},"@automapper/classes/mapped-types"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@automapper/classes/mapped-types")," is part of the public API of ",(0,r.kt)("inlineCode",{parentName:"p"},"@automapper/classes"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@automapper/classes/mapped-types")," is inspired by ",(0,r.kt)("inlineCode",{parentName:"p"},"@nestjs/mapped-types")," to provide mixins to reduce some boilerplate code."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"All ",(0,r.kt)("inlineCode",{parentName:"p"},"Mapper*Type")," are exported from ",(0,r.kt)("inlineCode",{parentName:"p"},"@automapper/classes/mapped-types")),(0,r.kt)("h3",{id:"mapperpicktype"},(0,r.kt)("inlineCode",{parentName:"h3"},"MapperPickType")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MapperPickType")," accepts an original class, and an array of property keys to ",(0,r.kt)("strong",{parentName:"p"},"pick")," from the original class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  @AutoMap()\n  foo: string;\n  @AutoMap()\n  bar: number;\n  @AutoMap()\n  baz: boolean;\n}\n\nclass PickFooBar extends MapperPickType(Foo, ['foo', 'bar']) {}\n\nmapper.createMap(Foo, PickFooBar);\n\nconst foo = new Foo();\nfoo.foo = 'foo';\nfoo.bar = 123;\nfoo.baz = true;\n\nconst pickedFooBar = mapper.map(foo, PickFooBar, Foo);\nconsole.log(pickedFooBar);\n/**\n * PickFooBar { foo: 'foo', bar: 123 }\n * only foo and bar have been picked\n */\n")),(0,r.kt)("h3",{id:"mapperomittype"},(0,r.kt)("inlineCode",{parentName:"h3"},"MapperOmitType")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MapperOmitType")," accepts an original class, and an array of property keys to ",(0,r.kt)("strong",{parentName:"p"},"omit")," from the original class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  @AutoMap()\n  foo: string;\n  @AutoMap()\n  bar: number;\n  @AutoMap()\n  baz: boolean;\n}\n\nclass OmitFooBar extends MapperOmitType(Foo, ['foo', 'bar']) {}\n\nmapper.createMap(Foo, OmitFooBar);\n\nconst foo = new Foo();\nfoo.foo = 'foo';\nfoo.bar = 123;\nfoo.baz = true;\n\nconst omittedFooBar = mapper.map(foo, OmitFooBar, Foo);\nconsole.log(omittedFooBar);\n/**\n * OmitFooBar { baz: true }\n * foo and bar have been omitted\n */\n")),(0,r.kt)("h3",{id:"mapperintersectiontype"},(0,r.kt)("inlineCode",{parentName:"h3"},"MapperIntersectionType")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MapperIntersectionType")," accepts two parent classes to receive all properties from both classes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  @AutoMap()\n  foo: string;\n}\n\nclass Bar {\n  @AutoMap()\n  bar: number;\n}\n\nclass IntersectFooBar extends MapperIntersectionType(Foo, Bar) {}\n\nmapper.createMap(IntersectFooBar, Foo);\nmapper.createMap(IntersectFooBar, Bar);\n\nconst intersect = new IntersectFooBar();\nintersect.foo = 'foo';\nintersect.bar = 123;\n\nconst foo = mapper.map(intersect, Foo, IntersectFooBar);\nconsole.log(foo);\n/**\n * Foo { foo: 'foo' }\n */\n\nconst bar = mapper.map(intersect, Bar, IntersectFooBar);\nconsole.log(bar);\n/**\n * Bar { bar: 123 }\n */\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"AutoMapper does not have the concept of mapping multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"Sources")," to a ",(0,r.kt)("inlineCode",{parentName:"p"},"Destination"),". Hence, please be cautious when to utilize ",(0,r.kt)("inlineCode",{parentName:"p"},"MapperIntersectionType"))))}u.isMDXComponent=!0}}]);