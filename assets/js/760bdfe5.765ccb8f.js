"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[9430],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,y=m["".concat(l,".").concat(d)]||m[d]||c[d]||o;return n?r.createElement(y,i(i({ref:t},u),{},{components:n})):r.createElement(y,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9015:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return m}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),i=["components"],p={id:"custom-type-converter",title:"Custom Type Converters",sidebar_label:"Custom Type Converters"},l=void 0,s={unversionedId:"mapping-configuration/custom-type-converter",id:"mapping-configuration/custom-type-converter",title:"Custom Type Converters",description:"Sometimes, you need to set a common converter for one type to another when the property names are matching between a Source and a Destination. For example, suppose we have a Source type:",source:"@site/docs/mapping-configuration/custom-type-converter.md",sourceDirName:"mapping-configuration",slug:"/mapping-configuration/custom-type-converter",permalink:"/docs/mapping-configuration/custom-type-converter",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/mapping-configuration/custom-type-converter.md",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1640016489,formattedLastUpdatedAt:"12/20/2021",frontMatter:{id:"custom-type-converter",title:"Custom Type Converters",sidebar_label:"Custom Type Converters"},sidebar:"docs",previous:{title:"PreCondition",permalink:"/docs/mapping-configuration/pre-condition"},next:{title:"Callbacks",permalink:"/docs/misc/callbacks"}},u=[{value:"Limitations",id:"limitations",children:[],level:2}],c={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Sometimes, you need to set a common converter for one type to another when the property names are matching between a ",(0,o.kt)("inlineCode",{parentName:"p"},"Source")," and a ",(0,o.kt)("inlineCode",{parentName:"p"},"Destination"),". For example, suppose we have a ",(0,o.kt)("inlineCode",{parentName:"p"},"Source")," type:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export class Source {\n  @AutoMap()\n  value1!: string;\n  @AutoMap()\n  value2!: string;\n  @AutoMap()\n  value3!: string;\n}\n")),(0,o.kt)("p",null,"and you would like to map it to the following ",(0,o.kt)("inlineCode",{parentName:"p"},"Destination")," type:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export class Destination {\n  @AutoMap()\n  value1!: number;\n  @AutoMap()\n  value2!: Date;\n  @AutoMap()\n  value3!: boolean;\n}\n")),(0,o.kt)("p",null,"If we were to try and map ",(0,o.kt)("inlineCode",{parentName:"p"},"Source -> Destination")," as-is, we would end up with mismatch values and types on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Destination"),". Eg: ",(0,o.kt)("inlineCode",{parentName:"p"},"Source.value1")," will be mapped to ",(0,o.kt)("inlineCode",{parentName:"p"},"Destination.value1")," even though the types of each ",(0,o.kt)("inlineCode",{parentName:"p"},"value1")," are different. ",(0,o.kt)("inlineCode",{parentName:"p"},"Destination.value1")," will end up with ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," value even though it is declared as ",(0,o.kt)("inlineCode",{parentName:"p"},"number"),". This is because AutoMapper will not try to make any assumptions on ",(0,o.kt)("strong",{parentName:"p"},"HOW")," these types should be mapped to each other."),(0,o.kt)("p",null,"To solve this issue, you must supply ",(0,o.kt)("strong",{parentName:"p"},"Custom Type Converters")," to a specific ",(0,o.kt)("inlineCode",{parentName:"p"},"Mapper"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const mapper = createMapper(/*...*/);\n\nmapper\n  .addTypeConverter(String, Number, (str) => parseInt(str))\n  .addTypeConverter(String, Date, (str) => new Date(str))\n  .addTypeConverter(String, Boolean, (str) => Boolean(str));\n\nmapper.createMap(Source, Destination);\n")),(0,o.kt)("p",null,"Here, we're telling AutoMapper:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If you are mapping a ",(0,o.kt)("inlineCode",{parentName:"li"},"String")," to a ",(0,o.kt)("inlineCode",{parentName:"li"},"Number"),", use ",(0,o.kt)("inlineCode",{parentName:"li"},"parseInt()")),(0,o.kt)("li",{parentName:"ul"},"If you are mapping a ",(0,o.kt)("inlineCode",{parentName:"li"},"String")," to a ",(0,o.kt)("inlineCode",{parentName:"li"},"Date"),", use ",(0,o.kt)("inlineCode",{parentName:"li"},"new Date()")),(0,o.kt)("li",{parentName:"ul"},"If you are mapping a ",(0,o.kt)("inlineCode",{parentName:"li"},"String")," to a ",(0,o.kt)("inlineCode",{parentName:"li"},"Boolean"),", use ",(0,o.kt)("inlineCode",{parentName:"li"},"Boolean()"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const source = new Source();\nsource.value1 = '123';\nsource.value2 = '10/14/1991';\nsource.value3 = 'truthy';\n\nconst destination = mapper.map(source, Destination, Source);\n/**\n * Destination {\n    value1: 123, // number\n    value2: Mon Oct 14 1991 00:00:00 GMT-0500 (Central Daylight Time), // a Date instance\n    value3; true // boolean\n * }\n */\n")),(0,o.kt)("h2",{id:"limitations"},"Limitations"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Custom Type Converters are currently available ",(0,o.kt)("strong",{parentName:"li"},"only")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"mapInitialize")," aka same property names with different types. For the above example, AutoMapper does nothing when it encounters a ",(0,o.kt)("inlineCode",{parentName:"li"},"String")," and a ",(0,o.kt)("inlineCode",{parentName:"li"},"Number")," if ",(0,o.kt)("inlineCode",{parentName:"li"},"forMember")," is used."),(0,o.kt)("li",{parentName:"ul"},"Due to a Reflection limitation, if you use ",(0,o.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html"},"TypeScript ",(0,o.kt)("em",{parentName:"a"},"lookup types")," (or ",(0,o.kt)("em",{parentName:"a"},"indexed access types"),")")," on either source or destination class fields, the type converter won't work unless you explicity write the target type in ",(0,o.kt)("inlineCode",{parentName:"li"},"@AutoMap()"),". For instance, this will work:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// ...\n@AutoMap({ typeFn: () => String })\nvalue: IFoo['str']`\n")),(0,o.kt)("p",null,"in which ",(0,o.kt)("inlineCode",{parentName:"p"},"interface IFoo { str: string }")))}m.isMDXComponent=!0}}]);