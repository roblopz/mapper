"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[8784],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),s=u(n),d=a,f=s["".concat(l,".").concat(d)]||s[d]||c[d]||i;return n?r.createElement(f,o(o({ref:t},m),{},{components:n})):r.createElement(f,o({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=s;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},3831:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return m},default:function(){return s}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),o=["components"],p={id:"map-with",title:"MapWith",sidebar_label:"MapWith"},l=void 0,u={unversionedId:"mapping-configuration/map-with",id:"mapping-configuration/map-with",title:"MapWith",description:"By default, @automapper/core will be able to map nested models for matching properties. In some rare cases where we have different properties name with related models, we can utilize mapWith()",source:"@site/docs/mapping-configuration/map-with.md",sourceDirName:"mapping-configuration",slug:"/mapping-configuration/map-with",permalink:"/docs/mapping-configuration/map-with",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/mapping-configuration/map-with.md",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1627859078,formattedLastUpdatedAt:"8/1/2021",frontMatter:{id:"map-with",title:"MapWith",sidebar_label:"MapWith"},sidebar:"docs",previous:{title:"FromValue",permalink:"/docs/mapping-configuration/from-value"},next:{title:"ConvertUsing",permalink:"/docs/mapping-configuration/convert-using"}},m=[{value:"Author note on <code>mapWith()</code>",id:"author-note-on-mapwith",children:[],level:3}],c={toc:m};function s(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"@automapper/core")," will be able to map nested models for matching properties. In some rare cases where we have different properties name with related models, we can utilize ",(0,i.kt)("inlineCode",{parentName:"p"},"mapWith()")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"mapWith()")," accepts three arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"withDestination"),": the nested model to map ",(0,i.kt)("strong",{parentName:"li"},"to")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"withSource"),": the nested model to map ",(0,i.kt)("strong",{parentName:"li"},"with")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"withSourceValue()"),": a function that accepts the ",(0,i.kt)("strong",{parentName:"li"},"Source")," and returns a value from a member of the ",(0,i.kt)("strong",{parentName:"li"},"Source"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { mapWith } from '@automapper/core';\n\nmapper.createMap(User, UserDto).forMember(\n  (destination) => destination.someProfile,\n  mapWith(ProfileDto, Profile, (source) => source.originalProfile)\n);\n")),(0,i.kt)("p",null,'Though this might look confusing, you can use the following narrative to make it easier to understand: "For ',(0,i.kt)("inlineCode",{parentName:"p"},"destination.someProfile"),", I want to map with ",(0,i.kt)("inlineCode",{parentName:"p"},"ProfileDto")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Profile"),", with the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"source.originalProfile"),'"'),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"mapWith()")," will set the ",(0,i.kt)("inlineCode",{parentName:"p"},"TransformationType")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"TransformationType.MapWith")),(0,i.kt)("h3",{id:"author-note-on-mapwith"},"Author note on ",(0,i.kt)("inlineCode",{parentName:"h3"},"mapWith()")),(0,i.kt)("p",null,"As much as I hate to admit it, ",(0,i.kt)("inlineCode",{parentName:"p"},"mapWith()")," is pretty useful. When you work with Server-side NodeJS, the database will, most of the time, return raw objects when you query for your data. Even with TypeScript, these are just Plain Objects."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"mapWith()")," will actually help in these cases because we provide the required information for ",(0,i.kt)("inlineCode",{parentName:"p"},"Mapper")," to look up the ",(0,i.kt)("inlineCode",{parentName:"p"},"Mapping")," for the data."))}s.isMDXComponent=!0}}]);