"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"category","label":"Introduction","items":[{"type":"link","label":"What and Why?","href":"/docs/introduction/what-why","docId":"introduction/what-why"},{"type":"link","label":"Technical difficulties","href":"/docs/introduction/technical","docId":"introduction/technical"},{"type":"link","label":"Alternatives","href":"/docs/introduction/alternatives","docId":"introduction/alternatives"}],"collapsible":true,"collapsed":true},{"type":"link","label":"Architecture","href":"/docs/architecture","docId":"architecture"},{"type":"category","label":"Getting started","items":[{"type":"link","label":"Installation","href":"/docs/getting-started/installation","docId":"getting-started/installation"},{"type":"link","label":"Introduce to AutoMapper","href":"/docs/getting-started/introduce-to-automapper","docId":"getting-started/introduce-to-automapper"},{"type":"link","label":"Introduce to Profile","href":"/docs/getting-started/introduce-to-profile","docId":"getting-started/introduce-to-profile"}],"collapsible":true,"collapsed":true},{"type":"link","label":"Fundamentals","href":"/docs/fundamentals","docId":"fundamentals"},{"type":"category","label":"Mapping Configuration","items":[{"type":"link","label":"Auto in AutoMapper","href":"/docs/mapping-configuration/auto","docId":"mapping-configuration/auto"},{"type":"category","label":"Custom Configuration","items":[{"type":"link","label":"Introduction","href":"/docs/mapping-configuration/introduce-to-custom-configuration","docId":"mapping-configuration/introduce-to-custom-configuration"},{"type":"link","label":"MapFrom","href":"/docs/mapping-configuration/map-from","docId":"mapping-configuration/map-from"},{"type":"link","label":"Condition","href":"/docs/mapping-configuration/condition","docId":"mapping-configuration/condition"},{"type":"link","label":"FromValue","href":"/docs/mapping-configuration/from-value","docId":"mapping-configuration/from-value"},{"type":"link","label":"MapWith","href":"/docs/mapping-configuration/map-with","docId":"mapping-configuration/map-with"},{"type":"link","label":"ConvertUsing","href":"/docs/mapping-configuration/convert-using","docId":"mapping-configuration/convert-using"},{"type":"link","label":"NullSubstitution","href":"/docs/mapping-configuration/null-substitution","docId":"mapping-configuration/null-substitution"},{"type":"link","label":"Ignore","href":"/docs/mapping-configuration/ignore","docId":"mapping-configuration/ignore"},{"type":"link","label":"MapWithArguments","href":"/docs/mapping-configuration/map-with-arguments","docId":"mapping-configuration/map-with-arguments"},{"type":"link","label":"MapDefer","href":"/docs/mapping-configuration/map-defer","docId":"mapping-configuration/map-defer"}],"collapsible":true,"collapsed":true},{"type":"link","label":"For Self (Flattening)","href":"/docs/mapping-configuration/for-self","docId":"mapping-configuration/for-self"},{"type":"link","label":"PreCondition","href":"/docs/mapping-configuration/pre-condition","docId":"mapping-configuration/pre-condition"},{"type":"link","label":"Custom Type Converters","href":"/docs/mapping-configuration/custom-type-converter","docId":"mapping-configuration/custom-type-converter"}],"collapsible":true,"collapsed":true},{"type":"category","label":"Miscellaneous","items":[{"type":"link","label":"Callbacks","href":"/docs/misc/callbacks","docId":"misc/callbacks"},{"type":"link","label":"Map Mutation","href":"/docs/misc/map-mutate","docId":"misc/map-mutate"},{"type":"link","label":"ErrorHandler","href":"/docs/misc/error-handler","docId":"misc/error-handler"},{"type":"link","label":"Limitations","href":"/docs/misc/limitations","docId":"misc/limitations"}],"collapsible":true,"collapsed":true},{"type":"category","label":"Plugins","items":[{"type":"link","label":"Introduction","href":"/docs/plugins-system/introduce-to-plugins","docId":"plugins-system/introduce-to-plugins"},{"type":"category","label":"Classes","items":[{"type":"link","label":"Introduction","href":"/docs/plugins-system/introduce-to-classes","docId":"plugins-system/introduce-to-classes"},{"type":"link","label":"Metadata","href":"/docs/plugins-system/classes-metadata","docId":"plugins-system/classes-metadata"},{"type":"link","label":"Limitations","href":"/docs/plugins-system/classes-limitations","docId":"plugins-system/classes-limitations"},{"type":"link","label":"Transformer Plugin","href":"/docs/plugins-system/classes-transformer-plugin","docId":"plugins-system/classes-transformer-plugin"},{"type":"link","label":"Mapped Types","href":"/docs/plugins-system/classes-mapped-types","docId":"plugins-system/classes-mapped-types"}],"collapsible":true,"collapsed":true},{"type":"category","label":"POJOs","items":[{"type":"link","label":"Introduction","href":"/docs/plugins-system/introduce-to-pojos","docId":"plugins-system/introduce-to-pojos"},{"type":"link","label":"Metadata","href":"/docs/plugins-system/pojos-metadata","docId":"plugins-system/pojos-metadata"}],"collapsible":true,"collapsed":true},{"type":"category","label":"Sequelize","items":[{"type":"link","label":"Introduction","href":"/docs/plugins-system/introduce-to-sequelize","docId":"plugins-system/introduce-to-sequelize"}],"collapsible":true,"collapsed":true},{"type":"category","label":"Customization","items":[{"type":"link","label":"Create plugin","href":"/docs/plugins-system/create-plugin","docId":"plugins-system/create-plugin"},{"type":"link","label":"Extend plugin","href":"/docs/plugins-system/extend-plugin","docId":"plugins-system/extend-plugin"}],"collapsible":true,"collapsed":true}],"collapsible":true,"collapsed":true},{"type":"link","label":"NestJS","href":"/docs/nestjs","docId":"nestjs"},{"type":"link","label":"Migrations","href":"/docs/migrations","docId":"migrations"}],"api":[{"type":"category","label":"Core","items":[{"type":"link","label":"createMapper","href":"/docs/api/create-mapper","docId":"api/create-mapper"}],"collapsible":true,"collapsed":true}]},"docs":{"api/create-mapper":{"id":"api/create-mapper","title":"createMapper","description":"createMapper() is used to create a Mapper object with a CreateMapperOptions.","sidebar":"api"},"architecture":{"id":"architecture","title":"Architecture","description":"Monorepo with Nx","sidebar":"docs"},"fundamentals":{"id":"fundamentals","title":"Fundamentals","description":"We have looked at the Basic example but in order to get into some more details of AutoMapper, we need to be aware of some of the definitions used in @automapper/*","sidebar":"docs"},"getting-started/installation":{"id":"getting-started/installation","title":"Installation","description":"Pick plugin(s)","sidebar":"docs"},"getting-started/introduce-to-automapper":{"id":"getting-started/introduce-to-automapper","title":"Introduce to AutoMapper","description":"Welcome to AutoMapper TypeScript! This basic tutorial will try to show you the problems that AutoMapper tries to solve with some basic functions that are included with @automapper/*","sidebar":"docs"},"getting-started/introduce-to-profile":{"id":"getting-started/introduce-to-profile","title":"Introduce to Profile","description":"In the previous section, we\'ve created our first mapping and some mapping configurations.","sidebar":"docs"},"introduction/alternatives":{"id":"introduction/alternatives","title":"Alternatives","description":"There are many automapper-like libraries out there for JS/TS world and I am going to list some of them as alternatives to @automapper/core:","sidebar":"docs"},"introduction/technical":{"id":"introduction/technical","title":"Technical Difficulties","description":"Problems with TypeScript","sidebar":"docs"},"introduction/what-why":{"id":"introduction/what-why","title":"What and why?","description":"What is AutoMapper?","sidebar":"docs"},"mapping-configuration/auto":{"id":"mapping-configuration/auto","title":"Auto in AutoMapper","description":"Matching properties","sidebar":"docs"},"mapping-configuration/condition":{"id":"mapping-configuration/condition","title":"Condition","description":"When configuring a member on the Destination, we can use condition() to conditionally map the member with the same name on the Source if some condition is met.","sidebar":"docs"},"mapping-configuration/convert-using":{"id":"mapping-configuration/convert-using","title":"ConvertUsing","description":"convertUsing() accepts a Converter interface which is an object with a convert() method.","sidebar":"docs"},"mapping-configuration/custom-type-converter":{"id":"mapping-configuration/custom-type-converter","title":"Custom Type Converters","description":"Sometimes, you need to set a common converter for one type to another when the property names are matching between a Source and a Destination. For example, suppose we have a Source type:","sidebar":"docs"},"mapping-configuration/for-self":{"id":"mapping-configuration/for-self","title":"For Self","description":"We know that we can have Flattening with NamingConvention. Let\'s remind ourselves how that works","sidebar":"docs"},"mapping-configuration/from-value":{"id":"mapping-configuration/from-value","title":"FromValue","description":"fromValue() accepts a raw value to map to the member on Destination. If you pass in an object, this object will be mapped as-is without any consideration for a nested Mapping.","sidebar":"docs"},"mapping-configuration/ignore":{"id":"mapping-configuration/ignore","title":"Ignore","description":"When we want to completely ignore a member on the Destination or to avoid Unmapped Properties error, we can utilize ignore() which does nothing on the member. This ultimately makes the member undefined","sidebar":"docs"},"mapping-configuration/introduce-to-custom-configuration":{"id":"mapping-configuration/introduce-to-custom-configuration","title":"Introduce to Custom Configuration","description":"Custom Configuration is made possible with forMember() method and a collection of MemberMapFunction.","sidebar":"docs"},"mapping-configuration/map-defer":{"id":"mapping-configuration/map-defer","title":"MapDefer","description":"mapDefer() is a special type of MemberMapFunction that can be used to defer another MemberMapFunction based on some logic in forMember()","sidebar":"docs"},"mapping-configuration/map-from":{"id":"mapping-configuration/map-from","title":"MapFrom","description":"We\'ve already seen mapFrom() throughout some early sections of the documentations.","sidebar":"docs"},"mapping-configuration/map-with":{"id":"mapping-configuration/map-with","title":"MapWith","description":"By default, @automapper/core will be able to map nested models for matching properties. In some rare cases where we have different properties name with related models, we can utilize mapWith()","sidebar":"docs"},"mapping-configuration/map-with-arguments":{"id":"mapping-configuration/map-with-arguments","title":"MapWithArguments","description":"Sometimes the consumers might need to pass in additional arguments to the map operations at runtime when invoking mapper.map(), mapWithArguments() is the map function that allows this behavior.","sidebar":"docs"},"mapping-configuration/null-substitution":{"id":"mapping-configuration/null-substitution","title":"NullSubstitution","description":"nullSubstitution() takes in a raw value to map to the member on Destination. If you pass in an object, Mapper will map the object as-is without any consideration for nested Mapping.","sidebar":"docs"},"mapping-configuration/pre-condition":{"id":"mapping-configuration/pre-condition","title":"PreCondition","description":"preCondition() works in the same manner as condition(). The difference is preCondition() is just a pre-check for subsequent MemberMapFunction.","sidebar":"docs"},"mdx":{"id":"mdx","title":"Powered by MDX","description":"You can write JSX and use React components within your Markdown thanks to MDX."},"migrations":{"id":"migrations","title":"Migrations","description":"Library Scope","sidebar":"docs"},"misc/callbacks":{"id":"misc/callbacks","title":"Callbacks","description":"@automapper/core allows for passing in beforeMap and afterMap which will be executed before and/or after a mapping operation. In AutoMapper, these are called MapAction","sidebar":"docs"},"misc/error-handler":{"id":"misc/error-handler","title":"ErrorHandler","description":"@automapper/ does not use console methods for handling errors in the code base. Instead, @automapper/ allows the consumers to pass in errorHandler when we call createMapper().","sidebar":"docs"},"misc/limitations":{"id":"misc/limitations","title":"Limitations","description":"Date Time","sidebar":"docs"},"misc/map-mutate":{"id":"misc/map-mutate","title":"Map Mutation","description":"@automapper/core provides a way to map mutate a Destination.","sidebar":"docs"},"misc/shim-file":{"id":"misc/shim-file","title":"Shim model for browsers","description":"@automapper/classes/extra/shim is part of the public API of @automapper/classes."},"nestjs":{"id":"nestjs","title":"NestJS Integration","description":"@automapper/nestjs is the official integration for NestJS.","sidebar":"docs"},"plugins-system/classes-limitations":{"id":"plugins-system/classes-limitations","title":"Limitations","description":"Circular Dependencies","sidebar":"docs"},"plugins-system/classes-mapped-types":{"id":"plugins-system/classes-mapped-types","title":"Mapped Types","description":"@automapper/classes/mapped-types is part of the public API of @automapper/classes.","sidebar":"docs"},"plugins-system/classes-metadata":{"id":"plugins-system/classes-metadata","title":"Metadata","description":"@automapper/classes provides a decorator @AutoMap() to store the metadata of the properties on the models.","sidebar":"docs"},"plugins-system/classes-transformer-plugin":{"id":"plugins-system/classes-transformer-plugin","title":"Transformer Plugin","description":"@automapper/classes/experimental/transformer-plugin is part of the public API of @automapper/classes.","sidebar":"docs"},"plugins-system/create-plugin":{"id":"plugins-system/create-plugin","title":"Create plugin","description":"Responsibilities","sidebar":"docs"},"plugins-system/extend-plugin":{"id":"plugins-system/extend-plugin","title":"Extend plugin","description":"In addition to creating your own plugins, you can also extend existing plugins. After all, plugins are just Object.","sidebar":"docs"},"plugins-system/introduce-to-classes":{"id":"plugins-system/introduce-to-classes","title":"Introduction","description":"@automapper/classes is one of the official plugins of @automapper/* monorepo.","sidebar":"docs"},"plugins-system/introduce-to-plugins":{"id":"plugins-system/introduce-to-plugins","title":"Introduce to Plugins","description":"@automapper/* utilizes a plugin-based approach to break up responsibilities away from the Core package. This is also to help with different mapping use-cases.","sidebar":"docs"},"plugins-system/introduce-to-pojos":{"id":"plugins-system/introduce-to-pojos","title":"Introduction","description":"@automapper/pojos is one of the official plugins of @automapper/* monorepo. @automapper/pojos works with plain objects along with their Interfaces/Types.","sidebar":"docs"},"plugins-system/introduce-to-sequelize":{"id":"plugins-system/introduce-to-sequelize","title":"Introduction","description":"@automapper/sequelize is one of the official plugins of @automapper/* monorepo. This plugin works with Sequelize by extending @automapper/classes and modifying instantiation process to accommodate Sequelize#Model type.","sidebar":"docs"},"plugins-system/pojos-metadata":{"id":"plugins-system/pojos-metadata","title":"Metadata","description":"Different than @automapper/classes, @automapper/pojos provides a different way to keep track of the metadata. That is a method called: createMetadataMap()","sidebar":"docs"}}}')}}]);